name: Flask Docker CI/CD  # Name of the workflow

on:
  push:
    branches: [ main ]  # Triggers the workflow when you push on 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub uses a fresh Ubuntu machine to run this job

    steps:
    - uses: actions/checkout@v4  # Clone your repo code into the runner

    - name: Run Bandit (Python security scan)
      run: |
        pip install bandit
        bandit -r app/

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}  # Use .pem key to connect to EC2

    - name: Copy files to EC2  # Send the project files to AWS instance
      # Copy all files to EC2, excluding the .git and scripts folders to prevent permission errors and avoid uploading local tools
      run: |
        rsync -avz --exclude='.git' --exclude='scripts/' -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app

    - name: Build, Scan & Restart Docker container remotely  # Build, scan, and start app
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          cd ~/app &&
          docker stop flask_app || true &&
          docker rm flask_app || true &&
          docker build -t flask_app . &&
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh &&
          ./trivy image flask_app &&
          docker run -d --name flask_app -p 5000:5000 flask_app
        '
    - name: Run Bandit (Python security scan)
      run: |
        pip install bandit
        bandit -r app/ -f txt -o reports/bandit_report.txt

    - name: Run Trivy (Docker image scan)
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
        ./trivy image flask_app --format table --output reports/trivy_report.txt



name: Flask Docker CI/CD  # Name of the workflow

on:
  push:
    branches: [ main ]  # Triggers the workflow when you push on 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub use a fresh Ubuntu machine to run this job

    steps:
    - uses: actions/checkout@v4  # Clone your repo code into this runner machine

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}  # Use .pem key to connect to EC2

    - name: Copy files to EC2 # Send the project files to AWS instance

    # Copy all files to EC2, excluding the .git folder to prevent permission errors
      run: |
        rsync -avz --exclude='.git' --exclude='scripts/' -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app

      #run: |
        #scp -o StrictHostKeyChecking=no -r . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app
        # Step 3: Send (copy) all your files to ~/app folder on the EC2 instance

    - name: Build & Restart Docker container remotely # Rebuild and restart app
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          cd ~/app &&
          docker stop flask_app || true &&         # Stop the old container (if running)
          docker rm flask_app || true &&           # Remove the old container
          docker build -t flask_app . &&           # Rebuild the Docker image
          docker run -d --name flask_app -p 5000:5000 flask_app  # Start it again on port 5000
        '
